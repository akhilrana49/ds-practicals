#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;

    // constructor
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};
void insertAtHead(Node *&head, int data)
{
    Node *temp = new Node(data);
    temp->next = head;
    head = temp;
}
void insertAtTail(Node *&tail, int data)
{
    Node *temp = new Node(data);
    tail->next = temp;
    tail = temp;
}
void printLL(Node *&head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << endl;
}
void insertAtAnyPosition(Node *&head, Node *&tail, int position, int data)
{
    // At position 1
    if (position == 1)
    {
        insertAtHead(head, data);
        return;
    }

    // At last Position
    Node *temp = head;
    int cnt = 1;
    while (cnt < position - 1)
    {
        temp = temp->next;
        cnt++;
    }

    if (temp->next == NULL)
    {
        insertAtTail(tail, data);
        return;
    }

    // At any position except last & first
    Node *newNode = new Node(data);
    newNode->next = temp->next;
    temp->next = newNode;
}
void deleteAnyNode(Node *&head, int position)
{
    if (position == 1)
    {
        Node *temp = head;
        head = head->next;
        temp->next = NULL;
        delete temp;
    }
    else
    {
        Node *prev = head;
        Node *curr = head;
        int cnt = 1;
        while (cnt < position)
        {
            prev = curr;
            curr = curr->next;
            cnt++;
        }

        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }
}
bool searchElement(Node *&head, int element)
{
    Node *temp = head;
    while (temp != NULL)
    {
        if (temp->data == element)
            return true;
        temp = temp->next;
    }
    return false;
}
void concatenate(Node *&head1, Node *&head2)
{
    Node *temp = head1;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }

    temp->next = head2;
}
int main()
{
    Node *node1 = new Node(23);

    Node *head = node1;
    Node *tail = node1;

    insertAtHead(head, 12);
    insertAtHead(head, 45);

    insertAtTail(tail, 34);
    insertAtTail(tail, 234);
    insertAtTail(tail, 29);

    printLL(head);

    insertAtAnyPosition(head, tail, 4, 100);
    printLL(head);

    insertAtAnyPosition(head, tail, 1, 10);
    insertAtAnyPosition(head, tail, 9, 1000);

    printLL(head);

    deleteAnyNode(head, 9);

    printLL(head);

    // cout << searchElement(head, 340);

    Node *node2 = new Node(56);
    Node *head2 = node2;
    Node *tail2 = node2;

    insertAtHead(head2, 23);
    insertAtHead(head2, 43);
    insertAtHead(head2, 3);

    printLL(head2);

    concatenate(head, head2);
    cout << "After concatenate two singly linked list" << endl;
    printLL(head);

    return 0;
}
