#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;

    // constructor
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};
void insertNode(Node *&tail, int data, int element)
{
    Node *newNode = new Node(data);

    // if no node exist
    if (tail == NULL)
    {
        newNode->next = newNode;
        tail = newNode;
    }
    // if atleast one node exist
    else
    {
        Node *curr = tail;
        while (curr->data != element)
        {
            curr = curr->next;
        }
        newNode->next = curr->next;
        curr->next = newNode;
    }
}

void deleteNode(Node *&tail, int element)
{
    // empty CLL
    if (tail == NULL)
    {
        cout << "Circular Linked is empty" << endl;
    }
    // non-empty CLL
    else
    {

        Node *prev = tail;
        Node *curr = prev->next;
        while (curr->data != element)
        {
            prev = curr;
            curr = curr->next;
        }

        prev->next = curr->next;

        if (tail == curr)
        {
            tail = prev;
        }
        curr->next = NULL;
    }
}

void printCLL(Node *&tail)
{
    Node *curr = tail;
    // one node print
    cout << curr->data << " -> ";
    curr = curr->next;
    while (curr != tail)
    {
        cout << curr->data << " -> ";
        curr = curr->next;
    }
    cout << endl;
}

int main()
{
    Node *tail = NULL;

    insertNode(tail, 15, 0);
    printCLL(tail);

    insertNode(tail, 35, 15);
    printCLL(tail);

    insertNode(tail, 99, 35);
    printCLL(tail);

    insertNode(tail, 124, 15);

    insertNode(tail, 22, 35);
    printCLL(tail);

    deleteNode(tail, 15);
    printCLL(tail);

    deleteNode(tail, 99);
    printCLL(tail);

    return 0;
}
