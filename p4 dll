#include <iostream>
using namespace std;

typedef string Elem; // list element type
class DNode
{ // doubly linked list node
private:
    Elem elem;                // node element value
    DNode *prev;              // previous node in list
    DNode *next;              // next node in list
    friend class DLinkedList; // allow DLinkedList access
};

class DLinkedList
{ // doubly linked list

public:
    DLinkedList();             // constructor
    ~DLinkedList();            // destructor
    bool empty() const;        // is list empty?
    const Elem &front() const; // get front element
    const Elem &back() const;  // get back element
    void display();
    void addFront(const Elem &e);     // add to front of list
    void addBack(const Elem &e);      // add to back of list
    void add(int pos, const Elem &e); // add at ith postion
    void removeFront();               // remove from front
    void removeBack();                // remove from back
    void remove(int pos);             // remove from ith position
    void remove(Elem e);              // Removing an element from a doubly Linked List
    DNode *search(const Elem &e);     // search for an element x and return its pointer

private:           // local type definitions
    DNode *header; // list sentinels
    DNode *trailer;

protected:                             // local utilities
    void add(DNode *v, const Elem &e); // insert new node before v
    void remove(DNode *v);             // remove node v
};

DLinkedList::DLinkedList()
{                       // constructor
    header = new DNode; // create sentinels
    trailer = new DNode;
    header->next = trailer; // have them point to each other
    trailer->prev = header;
}

DLinkedList::~DLinkedList()
{ // destructor
    while (!empty())
        removeFront(); // remove all but sentinels
    delete header;     // remove the sentinels
    delete trailer;
}

bool DLinkedList::empty() const // is list empty?
{
    return (header->next == trailer);
}

const Elem &DLinkedList::front() const // get front element
{
    return header->next->elem;
}

const Elem &DLinkedList::back() const // get back element
{
    return trailer->prev->elem;
}

void DLinkedList ::display()
{
    DNode *current = header;
    if (empty())
    {
        cout << "List is empty";
        return;
    }
    while (current != NULL)
    {
        cout << current->elem << " ";
        current = current->next;
    }
}
void DLinkedList::addFront(const Elem &e)
{
    DNode *newNode = new DNode;
    newNode->elem = e;
    newNode->prev = header;
    newNode->next = header->next;

    header->next->prev = newNode;
    header->next = newNode;
}

void DLinkedList::addBack(const Elem &e)
{
    DNode *newNode = new DNode;
    newNode->elem = e;
    newNode->prev = trailer->prev;
    newNode->next = trailer;
    trailer->prev->next = newNode;
    trailer->prev = newNode;
}

void DLinkedList ::add(int pos, const Elem &e)
{

    DNode *newNode = new DNode;
    newNode->elem = e;

    DNode *ptr = header->next;

    if (pos == 1)
    {
        // addFront
        newNode->prev = header;
        newNode->next = header->next;

        header->next->prev = newNode;
        header->next = newNode;
        return;
    }

    int count = 1; // ptr is at header->next
    while (ptr != NULL && count < pos - 1)
    {
        ptr = ptr->next;
        count++;
    }

    if (ptr == NULL)
    {
        cout << "Invalid Position";
    }

    newNode->prev = ptr;
    newNode->next = ptr->next;

    ptr->next->prev = newNode;
    ptr->next = newNode;
}

void DLinkedList::removeFront()
{
    if (empty())
    {
        throw "The list is empty";
    }

    DNode *temp = header->next;
    header->next = temp->next;
    temp->next->prev = temp->next;
    delete temp;
}

void DLinkedList::removeBack()
{
    if (empty())
    {
        throw "The list is empty";
    }

    DNode *temp = trailer->prev;
    trailer->prev = temp->prev;
    temp->prev->next = temp->next;
    delete temp;
}

void DLinkedList ::remove(int pos)
{
    DNode *ptr = header->next;

    if (empty())
    {
        cout << "Empty List";
    }

    if (pos == 1)
    { // remove front

        header->next = ptr->next;
        ptr->next->prev = ptr->next;
        delete ptr;
    }

    int count = 1;
    while (ptr != NULL && count < pos - 1)
    {
        ptr = ptr->next;
        count++;
    }

    if (ptr == NULL)
    {
        cout << "Invalid position" << endl;
    }

    DNode *old = ptr->next;
    ptr->next = old->next;
    old->next->prev = ptr;
    delete old;
}

void DLinkedList::remove(Elem e)
{
    DNode *temp = header->next;

    while (temp != trailer)
    {
        if (temp->elem == e)
        {
            temp->next->prev = temp->prev;
            temp->prev->next = temp->next;
            delete temp;
            break;
        }
        temp = temp->next;
    }

    if (temp == trailer)
    {
        cout << "element not found" << endl;
    }
}

void DLinkedList::add(DNode *v, const Elem &e)
{
    DNode *u = new DNode;
    u->elem = e;       // create a new node for e
    u->next = v;       // link u in between v
    u->prev = v->prev; // . . .and v->prev
    v->prev->next = v->prev = u;
}

void DLinkedList::remove(DNode *v)
{                       // remove node v
    DNode *u = v->prev; // predecessor
    DNode *w = v->next; // successor
    u->next = w;        // unlink v from list
    w->prev = u;
    delete v;
}

DNode *DLinkedList::search(const Elem &e)
{
    //     DNode *ptr=header->next;
    //    while(ptr!=NULL && ptr->elem x){
    //     ptr=ptr->next;
    //    }

    DNode *ptr = header;
    while (ptr != NULL && ptr->elem != e)
    {
        ptr = ptr->next;
        if (ptr == NULL)
        {
            cout << "element not exist" << endl;
        }
        else if (ptr->elem == e)
        {
            cout <<"\n"<< e << " found at " << ptr << endl;
            return ptr;
        }
    }
}



// int main()
// {

//     DLinkedList l;
//     l.addFront("neha");
//     l.addFront("ayush");
//     l.addFront("priya");
//     // l.removeBack(); -----> NOT WORKING
//     // l.removeFront();
//     // l.remove("neha");
//     l.add(3, "hello");
//     // l.remove(3);
//     // l.removeFront();
//     // l.removeBack();

//     l.display();
//     l.search("neha");

//     return 0;
// }
